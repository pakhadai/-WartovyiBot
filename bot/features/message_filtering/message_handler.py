# Wartovyi/bot/features/message_filtering/message_handler.py

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from bot.infrastructure.database import increment_daily_stat, log_action, get_group_settings, add_warning, \
    get_group_admin_id, get_punishment_settings
from bot.config import ADMIN_ID
from bot.infrastructure.localization import get_text
from .antispam_service import calculate_spam_score
from .delete_message_job import delete_message_job
from .antiflood_service import is_user_flooding


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π antispam_service
    –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥—Ä—É–ø–∏, –∞–Ω—Ç–∏-—Ñ–ª—É–¥—É —Ç–∞ –≥–Ω—É—á–∫–∏—Ö –ø–æ–∫–∞—Ä–∞–Ω—å.
    """
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    chat = update.message.chat
    settings = get_group_settings(chat.id)

    # --- –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –§–õ–£–î ---
    if settings.get('antiflood_enabled', True):
        if is_user_flooding(user.id, settings.get('antiflood_sensitivity', 5), context):
            try:
                # –í–∏–¥–∞—î–º–æ –º—É—Ç –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
                mute_duration = datetime.now() + timedelta(minutes=5)
                await context.bot.restrict_chat_member(
                    chat_id=chat.id, user_id=user.id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=mute_duration
                )

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (–ø–æ–∫–∏ —â–æ –±–µ–∑ –ø–µ—Ä–µ–∫–ª–∞–¥—É, –¥–æ–¥–∞–º–æ –ø—ñ–∑–Ω—ñ—à–µ)
                warning_msg = await update.message.reply_text(
                    f"‚ö†Ô∏è {user.mention_html()}, –≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ!\n"
                    f"üìµ –ú—É—Ç –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω.",
                    parse_mode=ParseMode.HTML
                )

                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–æ —Ñ–ª—É–¥
                await update.message.delete()

                # –°—Ç–∞–≤–∏–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                context.job_queue.run_once(
                    delete_message_job, 30,
                    data={'chat_id': chat.id, 'message_id': warning_msg.message_id}
                )

                # –õ–æ–≥—É—î–º–æ –¥—ñ—é
                log_action(chat.id, user.id, user.full_name, 'antiflood_triggered', 'Muted for 5 minutes')

            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–ª—É–¥—É –≤—ñ–¥ {user.id} –≤ —á–∞—Ç—ñ {chat.id}: {e}")

            # –í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –ø–æ–¥–∞–ª—å—à—É –æ–±—Ä–æ–±–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return
    # --- –ö–Ü–ù–ï–¶–¨ –ü–ï–†–ï–í–Ü–†–ö–ò –ù–ê –§–õ–£–î ---

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ - –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä—à–æ—é
    increment_daily_stat(chat.id, 'messages_total')
    if not settings['spam_filter_enabled']:
        return

    group_admin_id = get_group_admin_id(chat.id)
    if user.id == ADMIN_ID or user.id == group_admin_id:
        return

    spam_score, triggered_words = calculate_spam_score(update.message.text, chat.id)
    if "whitelist" in (triggered_words[0] if triggered_words else ""):
        return

    if spam_score >= settings['spam_threshold']:
        logging.info(f"–í–∏—è–≤–ª–µ–Ω–æ —Å–ø–∞–º –≤—ñ–¥ {user.full_name} ({user.id}) –∑ —Ä–∞—Ö—É–Ω–∫–æ–º {spam_score} –≤ —á–∞—Ç—ñ {chat.title}")

        # 1. –ù–∞–π–≤–∏—â–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –¥—ñ—è - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ–Ω—É—î–º–æ —ó—ó –Ω–µ–≥–∞–π–Ω–æ.
        try:
            await update.message.delete()
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {update.message.id} –≤ —á–∞—Ç—ñ {chat.id}: {e}")

        # 2. –í—Å—ñ —ñ–Ω—à—ñ –¥—ñ—ó (–ø–æ–∫–∞—Ä–∞–Ω–Ω—è, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –ª–æ–≥) –∑–±–∏—Ä–∞—î–º–æ –≤ —Å–ø–∏—Å–æ–∫
        #    —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é asyncio.gather.

        warnings_count = add_warning(user.id, chat.id)
        lang = user.language_code

        # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê –ì–ù–£–ß–ö–ò–• –ü–û–ö–ê–†–ê–ù–¨ ---
        punishment_rules = get_punishment_settings(chat.id)
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å,
        # —è–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        rule_key = warnings_count if warnings_count in punishment_rules else max(punishment_rules.keys())
        rule = punishment_rules.get(rule_key)

        action_taken_log = "–ù–µ–≤—ñ–¥–æ–º–æ"
        warning_text = ""
        tasks_to_run = []

        try:
            if rule and rule.get('action') == "mute":
                mute_duration_minutes = rule['duration']
                mute_until = datetime.now() + timedelta(minutes=mute_duration_minutes)
                tasks_to_run.append(context.bot.restrict_chat_member(
                    chat_id=chat.id, user_id=user.id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=mute_until
                ))
                # TODO: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –≥–Ω—É—á–∫–∏—Ö –ø–æ–∫–∞—Ä–∞–Ω—å
                warning_text = f"‚ö†Ô∏è {user.mention_html()}, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞ —Å–ø–∞–º.\nüìµ –ú—É—Ç –Ω–∞ {mute_duration_minutes} —Ö–≤–∏–ª–∏–Ω."
                action_taken_log = f"–ú—É—Ç –Ω–∞ {mute_duration_minutes} —Ö–≤."

            elif rule and rule.get('action') == "ban":
                tasks_to_run.append(context.bot.ban_chat_member(chat_id=chat.id, user_id=user.id))
                warning_text = get_text(lang, "spam_warning_3",
                                        user_mention=user.mention_html())  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –±–∞–Ω
                action_taken_log = "–ë–∞–Ω"

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –≤ —á–∞—Ç
            if warning_text:
                warning_msg_task = context.bot.send_message(
                    chat_id=chat.id, text=warning_text, parse_mode=ParseMode.HTML, disable_notification=True
                )
                tasks_to_run.append(warning_msg_task)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –¥–ª—è {user.id} –≤ —á–∞—Ç—ñ {chat.id}: {e}")
        # --- –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–á –õ–û–ì–Ü–ö–ò ---

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—É
        log_recipient_id = group_admin_id or ADMIN_ID
        try:
            log_message = get_text(
                "uk",  # –õ–æ–≥–∏ –∑–∞–≤–∂–¥–∏ –æ–¥–Ω—ñ—î—é –º–æ–≤–æ—é –¥–ª—è —É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
                "log_spam_detected",
                user_mention=user.mention_html(),
                user_id=user.id,
                chat_title=chat.title,
                spam_score=spam_score,
                threshold=settings['spam_threshold'],
                triggered_words=', '.join(triggered_words),
                warnings_count=warnings_count,
                action_taken=action_taken_log,
                message_text=update.message.text
            )
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞
            log_keyboard = None
            tasks_to_run.append(context.bot.send_message(
                chat_id=log_recipient_id, text=log_message,
                parse_mode=ParseMode.HTML, reply_markup=log_keyboard
            ))
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ª–æ–≥ –≤–ª–∞—Å–Ω–∏–∫—É {log_recipient_id} –¥–ª—è —á–∞—Ç—É {chat.id}: {e}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks_to_run, return_exceptions=True)

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, —â–æ–± –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {result}")
            # –®—É–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ `warning_msg_task`
            elif hasattr(result, 'message_id') and result.chat_id == chat.id:
                context.job_queue.run_once(
                    delete_message_job, 30, data={'chat_id': result.chat_id, 'message_id': result.message_id}
                )

        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –¥—ñ—ó, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è
        log_action(chat.id, user.id, user.full_name, 'spam_detected', f'Score: {spam_score}')
        increment_daily_stat(chat.id, 'messages_deleted')